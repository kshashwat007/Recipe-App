{"version":3,"sources":["components/recipe/Recipe.js","components/search-box/search-box.js","components/search-filter/search-filter.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","src","alt","parseInt","map","ingredient","index","key","text","SearchBox","search","updateSearch","placeholder","type","value","onChange","SearchFilter","filterLogic","onClick","App","useState","recipes","setRecipes","setSearch","query","setQuery","useEffect","a","fetch","response","json","data","hits","getRecipes","onSubmit","e","preventDefault","target","classList","toggle","li","contains","innerText","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.519bc99d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './recipe.styles.css';\r\n\r\nexport const Recipe = ({ title, calories, image, ingredients }) => (\r\n  <div className=\"recipe\">\r\n    <h1 className=\"recipe_title\">{title}</h1>\r\n    <div className=\"image_div\">\r\n      <img className=\"image\" src={image} alt=\"\" />\r\n    </div>\r\n    <p className=\"calories\">Calories: {parseInt(calories)} Kcal</p>\r\n    <h2>Ingredients:</h2>\r\n    <ul className=\"ingredients\">\r\n      {ingredients.map((ingredient, index) => (\r\n        <li className=\"ingredient\" key={index}>\r\n          <i className=\"fas fa-caret-right\" /> {ingredient.text}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ search, updateSearch, placeholder }) => (\r\n  <div>\r\n    <input\r\n      type=\"text\"\r\n      className=\"search-bar\"\r\n      value={search}\r\n      onChange={updateSearch}\r\n      placeholder={placeholder}\r\n    />\r\n    <button type=\"submit\" className=\"search-button\">\r\n      <i className=\"fas fa-search\" />\r\n    </button>\r\n  </div>\r\n);","import React from 'react';\r\nimport './search-filter.styles.css';\r\n\r\nexport const SearchFilter = ({ filterLogic }) => (\r\n  <div>\r\n    <ul className=\"filters\">\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Chicken\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Sushi\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Bread\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Risotto\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Pasta\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Soup\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Dessert\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Salad\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Eggs\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Pizza\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Fish\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Grill\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);","import React, { useEffect, useState } from 'react';\nimport { Recipe } from './components/recipe/Recipe';\nimport { SearchBox } from './components/search-box/search-box';\nimport { SearchFilter } from './components/search-filter/search-filter';\nimport './App.css';\n\nconst App = () => {\n  \n  const APP_ID = 'c7dad31d';\n  const APP_KEY = 'e8a676191da6bfe0d774109b5d4e509f';\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    const getRecipes = async () => {\n      const response = await fetch(\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n      const data = await response.json();\n      setRecipes(data.hits);\n    };\n    getRecipes();\n  }, [query]);\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n  };\n\n  const filterLogic = e => {\n    e.target.classList.toggle('active-filter');\n    const li = e.target;\n    if (li.classList.contains('active-filter')) {\n      setQuery(li.innerText);\n    } else {\n      setQuery('');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1 className=\"title\">Recipes Finder</h1>\n        <form onSubmit={getSearch} className=\"search-form\">\n          <SearchBox updateSearch={updateSearch} placeholder=\"Search recipe\" />\n        </form>\n        <div className=\"search-filter\">\n          <SearchFilter filterLogic={filterLogic} />\n        </div>\n      </header>\n      <div className=\"recipes\">\n        {recipes.map((recipe, index) => (\n          <Recipe\n            key={index}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}